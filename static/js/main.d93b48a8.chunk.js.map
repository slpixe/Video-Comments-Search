{"version":3,"sources":["components/youtubeList/YoutubeList.js","history.js","VideoCommentsSearch.js","App.js","registerServiceWorker.js","index.js"],"names":["YoutubeList","list","props","items","renderItems","map","item","key","id","className","snippet","topLevelComment","textOriginal","style","height","this","Component","history","createBrowserHistory","urlPropsQueryConfig","videoId","type","UrlQueryParamTypes","string","queryParam","query","App","updateVideoId","event","target","value","onChangeVideoId","updateSearchTerm","queryString","onChangeQuery","performSearch","nextPage","preventDefault","searchObj","part","searchTerms","maxResults","pageToken","state","nextPageToken","fetch","stringify","then","results","json","data","setState","searchResultItems","pageInfo","listen","forceUpdate","length","pageNumber","search","classes","root","header","onSubmit","TextField","searchBox","label","helperText","required","onChange","autoFocus","Button","searchButton","variant","color","searchResultsList","renderResults","addUrlProps","withStyles","display","flexDirection","width","backgroundColor","padding","boxSizing","overflow","background","VideoCommentsSearch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","configureUrlQuery","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d93b48a8.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass YoutubeList extends Component {\r\n\r\n  list = this.props.items;\r\n\r\n  renderItems = () => {\r\n    return this.props.items.map(item => {\r\n      return (\r\n        <div key={item.id} className={'searchItem'}>\r\n          {item.snippet.topLevelComment.snippet.textOriginal}\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div style={{height: '100%'}}>\r\n        {this.renderItems()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default YoutubeList;","import {createBrowserHistory} from 'history'\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport default history","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport { Button, TextField, FormControl } from \"@material-ui/core\";\r\nimport queryString from \"qs\";\r\nimport YoutubeList from \"./components/youtubeList/YoutubeList\";\r\nimport { addUrlProps, UrlQueryParamTypes } from \"react-url-query\";\r\nimport history from \"./history\";\r\n\r\nconst styles = {\r\n  root: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  header: {\r\n    width: \"100%\",\r\n    backgroundColor: \"white\",\r\n    padding: 20,\r\n    boxSizing: \"border-box\",\r\n  },\r\n  searchButton: {},\r\n  searchResultsList: {\r\n    overflow: \"auto\",\r\n    height: \"100%\",\r\n    background:\r\n      \"url(http://cdn.backgroundhost.com/backgrounds/subtlepatterns/hexellence.png)\",\r\n  },\r\n};\r\n\r\nconst youtubeApi = \"https://www.googleapis.com/youtube/v3\";\r\n\r\nconst urlPropsQueryConfig = {\r\n  videoId: { type: UrlQueryParamTypes.string, queryParam: \"video\" },\r\n  query: { type: UrlQueryParamTypes.string, queryParam: \"query\" },\r\n};\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      searchResultItems: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    history.listen(() => this.forceUpdate());\r\n  }\r\n\r\n  updateVideoId = (event) => {\r\n    const videoId = event.target.value;\r\n    this.props.onChangeVideoId(videoId);\r\n  };\r\n\r\n  updateSearchTerm = (event) => {\r\n    const queryString = event.target.value;\r\n    this.props.onChangeQuery(queryString);\r\n  };\r\n\r\n  performSearch = (event, nextPage) => {\r\n    event.preventDefault();\r\n    if (!this.props.videoId) return false;\r\n\r\n    let searchObj = {\r\n      part: \"snippet\",\r\n      videoId: this.props.videoId,\r\n      key: \"AIzaSyAC3Jyzw0_2_ZcsIZYa51TzN1AjvnyhFKY\",\r\n      searchTerms: this.props.query ? this.props.query : null,\r\n      maxResults: 30,\r\n      pageToken:\r\n        this.state.nextPageToken && nextPage ? this.state.nextPageToken : null,\r\n    };\r\n\r\n    fetch(`${youtubeApi}/commentThreads?${queryString.stringify(searchObj)}`)\r\n      .then((results) => {\r\n        return results.json();\r\n      })\r\n      .then((data) => {\r\n        this.setState({\r\n          searchResultItems: [...this.state.searchResultItems, ...data.items],\r\n          nextPageToken: data.nextPageToken,\r\n          pageInfo: data.pageInfo,\r\n        });\r\n      });\r\n  };\r\n\r\n  renderResults() {\r\n    if (\r\n      !this.state.searchResultItems ||\r\n      this.state.searchResultItems.length === 0\r\n    )\r\n      return null;\r\n    return (\r\n      <div style={{ height: \"100%\" }}>\r\n        <YoutubeList\r\n          items={this.state.searchResultItems}\r\n          pageNumber={this.state.pageInfo}\r\n          search={this.performSearch}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.classes.root}>\r\n        <div className={this.props.classes.header}>\r\n          <form onSubmit={this.performSearch}>\r\n            <TextField\r\n              className={this.props.classes.searchBox}\r\n              type={\"text\"}\r\n              label={\"Youtube video ID\"}\r\n              helperText={\"e.g. kJQP7kiw5Fk\"}\r\n              value={this.props.videoId}\r\n              required={true}\r\n              onChange={(event) => this.updateVideoId(event)}\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              className={this.props.classes.searchBox}\r\n              type={\"search\"}\r\n              label={\"Search term\"}\r\n              helperText={\"e.g. song\"}\r\n              value={this.props.query}\r\n              required={false}\r\n              onChange={(event) => this.updateSearchTerm(event)}\r\n            />\r\n            <Button\r\n              className={this.props.classes.searchButton}\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              // onClick={this.performSearch}\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n          </form>\r\n        </div>\r\n        <div className={this.props.classes.searchResultsList}>\r\n          {this.renderResults()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// export default App;\r\nexport default addUrlProps({ urlPropsQueryConfig })(withStyles(styles)(App));\r\n","import React, { Component } from 'react';\r\nimport VideoCommentsSearch from './VideoCommentsSearch';\r\nimport history from './history';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    // force an update if the URL changes\r\n    history.listen(() => this.forceUpdate());\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <VideoCommentsSearch />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport history from './history'\r\nimport { configureUrlQuery } from 'react-url-query';\r\n\r\nconfigureUrlQuery({ history });\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}